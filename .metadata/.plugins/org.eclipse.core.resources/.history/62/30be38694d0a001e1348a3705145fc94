package org.sumit.spring.secondjdbcspring.dao;

import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.sumit.spring.secondjdbcspring.entity.User;

@Repository
@Qualifier("userDAO")
public class UserDAOImpl implements UserDAO 
{

    @Autowired
    JdbcTemplate jdbcTemplate;

    @Autowired
    Environment env;

    RowMapper<User> rowMapper;

    String sqlAddUser;
    String sqlDeleteUser;
    String sqlUpdateUser;
    String sqlChangePassword;
    String sqlAllUsers;
    String sqlUserByUserName;

    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @PostConstruct
    public void initialize() {
        sqlAddUser = env.getProperty("sql.adduser");
        sqlDeleteUser = env.getProperty("sql.deleteUser");
        sqlUpdateUser = env.getProperty("sql.updateUser");
        sqlChangePassword = env.getProperty("sql.changePassword");
        sqlAllUsers = env.getProperty("sql.allUsers");
        sqlUserByUserName = env.getProperty("sql.userByUserName");

        rowMapper = (result, rowNo) -> {
            User objUser = new User();
            objUser.setUserName(result.getString(1));
            objUser.setPassword(result.getString(2));
            objUser.setName(result.getString(3));
            objUser.setEmail(result.getString(4));
            objUser.setPhone(result.getString(5));
            objUser.setCity(result.getString(6));
            return objUser;
        };
    }

    @Override
    public boolean addUser(String userName, String password, String name, String email, String phone, String city) {
        int count = jdbcTemplate.update(sqlAddUser, userName, password, name, email, phone, city);
        return count > 0;
    }

    @Override
    public List<User> allUsers() {
        return jdbcTemplate.query(sqlAllUsers, rowMapper);
    }

    @Override
    public User getUserByUserName(String userName) {
        return jdbcTemplate.queryForObject(sqlUserByUserName, rowMapper, userName);
    }

    @Override
    public boolean changePassword(String userName, String password) {
    	int count = jdbcTemplate.update(sqlChangePassword, password, userName);
        return count > 0;
    }

    @Override
    public boolean deleteUser(String userName) {
    	return jdbcTemplate.q
    }

    @Override
    public boolean updateUser(String userName, String password, String name, String email, String phone, String city) {
        // TODO Auto-generated method stub
        return false;
    }
}
